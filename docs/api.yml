openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD21099
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Author
paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate       
        - in: query
          name: releaseDate
          description: Filter books by intervals of dates of the releaseDate
          required: false
          schema:
            type: string
            example: '10/10/2023-10/11/2023'
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - "Books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/CreateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Book'
    delete:
      tags:
        - "Books"
      summary: Remove a book by id
      description: The returned confirmation if book delete.
      operationId: getBooks
      parameters:
        - in: query
          name: id
          description: remove book by given id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Confirmation the book is delete.
          content:
            application/txt:
              schema:
                type: string
                example: 'The book whit id=1 is removed successfully'
                
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      tags:
        - "Author"
      summary: Get all authors
      description: The returned authors are ordered by name.
      operationId: getAuthors
      parameters:
        - in: query
          name: name
          description: Filter return author by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      tags:
        - "Author"
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    delete:
      tags:
        - "Author"
      summary: Remove a author by id
      operationId: deleteAuthor
      parameters:
        - in: path
          name: id
          description: Remove author by given id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Confirmation that the author is deleted
          content:
            application/json:
              schema:
                type: string
                example: 'The author whit id = 1 is removed successfully'

components:
  schemas:
    CreateBook:
      type: object
      properties:
        bookName:
          type: string  
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date

    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          #TODO1: set it as a component with properties : id, name, sex (M or F)
          allOf:
            - $ref: '#/components/schemas/Author' 
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date

    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          example: John Doe
        sex:
          type: string
          example: M