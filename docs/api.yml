openapi: 3.0.3
info:
  title: Library API
  version: 2.0.0
  description: STD21099
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Author
  - name: Topic
paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate       
        - in: query
          name: releaseDateMin
          description: |
            If `releaseDateMax` is not inprovided, `releaseDateMin` is inprovided. 
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateMax
          description: |
            If `releaseDateMin` is not inprovided, `releaseDateMax` is inprovided. 
          required: false
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        200:
          $ref: '#/components/responses/200Response'
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'

    post:
      tags:
        - "Books"
      summary: Create a list of books
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ImportBook'
      responses:
        200:
          $ref: '#/components/responses/200Response'
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'

    put:
      tags:
        - "Books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          $ref: '#/components/responses/200Response'
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'

  /books/{bookId}:
    delete:
      tags:
        - "Books"
      summary: Remove a book by id
      description: The returned confirmation if book delete.
      operationId: deleteBookById
      parameters:
        - $ref: '#/components/parameters/BookId'
      responses:
        200:
          description: Confirmation the book deleted.
          content:
            text/plain:
              schema:
                type: string
                example: 'Book delete successfully'
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
                
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      tags:
        - "Author"
      summary: Get all authors
      description: The returned authors are ordered by name.
      operationId: getAuthors
      parameters:
        - in: query
          name: name
          description: Filter return author by given name
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/pathPage'
        - $ref: '#/components/parameters/pathPageSize'
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'

    post:
      tags:
        - "Author"
      summary: Create a list of authors
      operationId: importAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ImportAuthor'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'

    put:
      tags:
        - "Author"
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'

  /authors/{authorId}:
    delete:
      tags:
        - "Author"
      summary: Remove a author by id
      operationId: deleteAuthorById
      parameters:
        - $ref: '#/components/parameters/AuthorId'
      responses:
        200:
          description:  Confirmation the author deleted.
          content:
            text/plain:
              schema:
                type: string
                example: Author delete successfully
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  
  /authorTopics:
    get:
      tags:
        - "Author"
      summary: Get all authorTopics
      description: The returned authors and list topics.
      operationId: getAuthorTopics
      responses:
        200:
          description: The list of authors with list topic
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorTopics'
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'

  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Modify author for a book by Id
      operationId: updateBookAssociateAuthor
      parameters:
        - $ref: '#/components/parameters/BookId'
        - $ref: '#/components/parameters/AuthorId'
      responses:
        200:
          description: The updated book
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'

  /books/authors:
    put:
      tags:
        - Books
      summary: Modify authors for a books by Id
      operationId: updateBooksWithAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          $ref: '#/components/responses/200Response'
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'

  /books/{bookId}/topics/{topicId}:
    put:
      tags:
        - Books
      summary: Modify topic for a book by Id
      operationId: updateBookAssociateTopic
      parameters:
        - $ref: '#/components/parameters/BookId'
        - $ref: '#/components/parameters/TopicId'
      responses:
        200:
          $ref: '#/components/responses/200Response'
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  
  /books/topics:
    put:
      tags:
        - Books
      summary: Modify topics for books by Id
      operationId: updateBooksWithTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                $ref: '#/components/schemas/UpdateBookTopic'
      responses:
        200:
          $ref: '#/components/responses/200Response'
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'

  /topics:
    get:
      tags:
        - "Topic"
      summary: Get all topics
      description: The returned topics are ordered by name.
      operationId: getTopics
      parameters:
        - in: query
          name: name
          description: Filter return topic by given name
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        200:
          description: The list of filtered topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'

    put:
      tags:
        - "Topic"
      summary: Create or update a list of topic
      operationId: crupdateTopic
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateTopic'
      responses:
        200:
          description: The list of created or updated topic
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'

  /topics/{topicId}:
    delete:
      tags:
        - "Topic"
      summary: Remove a topic by id
      operationId: deleteTopicById
      parameters:
        - $ref: '#/components/parameters/TopicId'
      responses:
        200:
          description:  Confirmation the topic deleted.
          content:
            text/plain:
              schema:
                type: string
                example: Topic delete successfully
        400:
          $ref: '#/components/responses/400Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'


components:
  schemas:
    CrupdateTopic:
      type: object
      properties:
        topicName:
          type: string
          example: 'Romance'

    Topic:
      type: object
      allOf:
        - properties:
            id:
              type: string
        - $ref: '#/components/schemas/CrupdateTopic'
    

    CrupdateBook:
      type: object
      properties:
        bookName:
          type: string  
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date

    Book:
      type: object
      allOf:
        - properties:
            id:
              type: string
            author:
              allOf:
                - $ref: '#/components/schemas/Author'
            Topic:
              allOf:
                - $ref: '#/components/schemas/Topic'
        - $ref: '#/components/schemas/CrupdateBook'

    CrupdateAuthor:
      type: object
      properties:
        authorName:
          type: string
          example: John Doe
        sex:
          $ref: '#/components/schemas/Sex'

    Sex:
      type: string
      enum:
        - M
        - F

    Author:
      type: object
      allOf:
        - properties:
            id:
              type: string
        - allOf:
            - $ref: '#/components/schemas/CrupdateAuthor'
    
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId: 
          type: string
      required:
        - "bookId"
        - "authorId"

    UpdateBookTopic:
      type: object
      properties:
        bookId:
          type: string
        topicId: 
          type: string
      required:
        - "bookId"
        - "authorId"
    
    AuthorTopics:
      type: object
      allOf:
        - allOf:
            - $ref: '#/components/schemas/CrupdateAuthor'
      properties:
        topic:
          type: array
          items:
            $ref: '#/components/schemas/Topic'
    
    ImportBook:
    # bookName, author, pageNumbers, topic, releaseDate, idAuthor
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: string

    ImportAuthor:
    # authorName, sex
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string
          example: M

  responses:
    200Response:
      description: Successfull response
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: object
                properties:
                  code:
                    type: integer
                    example:  200
                  message:
                    type: string
                    example: Success
              body:
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/Book'
                  - $ref: '#/components/schemas/Author'
                  - $ref: '#/components/schemas/Topic'

    400Response:
      description: Bad request response
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Bad Request
              body:
                type: string
                example: "Invalid input"

    403Response:
      description: Forbidden response
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: object
                properties:
                  code:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: Forbidden
              body:
                type: string
                example: "Access denied"

    500Response:
      description: Internal Server Error response
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: object
                properties:
                  code:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
              body:
                type: string

  parameters:
    queryPagination:
      name: queryPagination
      description: Query Pagination Parameters
      in: query
      schema:
        type: object
        properties:
          page:
            $ref: '#/components/parameters/queryPage'
          pageSize:
            $ref: '#/components/parameters/queryPageSize'

    pathPagination:  
      name: pathPagination
      description: Path Pagination Parameters
      in: path
      required: false
      schema:
        type: object
        properties:
          page:
            $ref: '#/components/parameters/pathPage'
          pageSize:
            $ref: '#/components/parameters/pathPageSize'

    queryPage:
      name: page
      description: Page Number for pagination
      in: query
      schema:
        type: integer
        default: 1
      required: false
    queryPageSize:
      name: pageSize
      description: Page size for pagination
      in: query
      schema:
        type: integer
        default: 50
      required: false

    pathPage:
      name: page
      description: Page Number for pagination
      in: path
      schema:
        type: integer
        default: 1
      required: false
    pathPageSize:
      name: pageSize
      description: Page size for pagination
      in: path
      schema:
        type: integer
        default: 50
      required: false

    BookId:
      in: path
      name: bookId
      description: Id of book
      schema:
        type: string
      required: true

    AuthorId:
      in: path
      name: authorId
      description: Id of author
      schema:
        type: string
      required: true

    TopicId:
      in: path
      name: topicId
      description: Id of topic
      schema:
        type: string
      required: true

